==================================
MID-SEMESTER PRESENTATION CONTENT
==================================

*** SLIDE 1: TITLE SLIDE ***
Title: First Come First Serve (FCFS) CPU Scheduling
A Web-Based Implementation

Presented by:
Pranjal Nath Goswami (University Roll No: 2371289) - Project Lead & Backend Developer
Diya Bisht (University Roll No: 2371101) - Frontend Developer
Karan Singh (University Roll No: 2371171) - Algorithm Implementation
Pradeep Singh Bora (University Roll No: 2371283) - Testing & Documentation

University: Graphic Era Hill University (GEHU), Bhimtal
Department: School of Computing
Course: Bachelor in Computer Application (BCA)
Semester: 4th (2nd Year)
Subject: Software Engineering
Project Group No.: 44
Project Faculty: Dr. Mukesh Joshi, Dr. Naveen Tewari

*** SLIDE 2: PROJECT OVERVIEW ***
Title: Project Overview

• Objective: 
  - Develop a web-based implementation of the FCFS CPU scheduling algorithm with visualization

• Technology Stack:
  - Backend: C++ with Crow Framework
  - Frontend: HTML, CSS, JavaScript

• Purpose:
  - Create an interactive tool to understand CPU scheduling

*** SLIDE 3: WHAT IS CPU SCHEDULING? ***
Title: Understanding CPU Scheduling

• Definition:
  - Process of determining which process runs on the CPU at a given time

• Importance:
  - Maximizes CPU utilization
  - Ensures fair allocation of resources
  - Minimizes waiting time for processes

• Real-world Example:
  - Bank queue system (first person in line gets served first)

*** SLIDE 4: FIRST COME FIRST SERVE (FCFS) ***
Title: First Come First Serve (FCFS)

• Basic Concept:
  - Processes are executed in the order they arrive
  - Simple queuing mechanism

• Characteristics:
  - Non-preemptive scheduling
  - Simple to implement
  - Fair in terms of arrival order

• Example Scenario:
  Process | Arrival Time | Burst Time
  P1      | 0            | 5
  P2      | 1            | 3
  P3      | 2            | 8

*** SLIDE 5: KEY METRICS ***
Title: Key Performance Metrics

• Arrival Time:
  - When a process enters the system

• Burst Time:
  - CPU time required for process execution

• Completion Time:
  - When a process finishes execution

• Turnaround Time:
  - Total time from arrival to completion (CT - AT)

• Waiting Time:
  - Time process waits in ready queue (TAT - BT)

*** SLIDE 6: PROJECT FEATURES ***
Title: Project Features

• Interactive Web Interface:
  - Add/remove processes dynamically
  - Input process details (PID, arrival time, burst time)
  - Real-time visualization of schedule

• Backend Processing:
  - Efficient implementation of FCFS algorithm
  - JSON-based data exchange
  - Responsive API endpoints

*** SLIDE 7: TECHNICAL ARCHITECTURE ***
Title: System Architecture

• Frontend Layer:
  - HTML structure for user interface
  - CSS styling for visual elements
  - JavaScript for dynamic interactions

• Backend Layer:
  - C++ implementation of core algorithm
  - Crow Framework for web server capabilities
  - JSON processing for data exchange

*** SLIDE 8: FUTURE ENHANCEMENTS ***
Title: Future Enhancements

• Planned Features:
  - Support for additional scheduling algorithms (SJF, Round Robin)
  - Enhanced visualization options
  - Performance metrics comparison
  - Mobile-responsive design

• Technical Improvements:
  - Optimization for large process sets
  - Real-time updates using WebSockets
  - Local storage for saving scenarios

*** SLIDE 9: LEARNING OUTCOMES ***
Title: Learning Outcomes

• Technical Skills:
  - Algorithm implementation in C++
  - Web development with HTML, CSS, JS
  - Client-server architecture
  - JSON data handling

• Soft Skills:
  - Project planning and management
  - Documentation
  - Team collaboration
  - Problem-solving

*** SLIDE 10: THANK YOU ***
Title: Thank You

Contact Information:
Email: pranjalng2002@gmail.com
GitHub: https://github.com/PranjalNG/OS-project

Questions & Discussion 